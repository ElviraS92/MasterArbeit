function [result] = execute_plate_hx(x)

% renaming: parameters for optimization
parameters.w_ms_1 =x(1);
parameters.w_ms_3 =x(2);
parameters.t_res_1=x(3);
parameters.t_res_3=x(3); % same residence time for both phases

% loading material values tables
load('table_lambda_air.mat');
load('table_lambda_CaCO3.mat');
load('table_lambda_hx_pipe.mat');

% call input_values and constants for calcutlation
con_struct_plate_hx;

% Plate model with molten salt

%% Phase 1: Heat Transfer CaO to Plates

% CONVERSION OF VARIABLES
% temperatures
calc_values.T_ms_in_1=convert_theta2T(input_values.theta_ms_in_1);
calc_values.T_CaO_in_1=convert_theta2T(input_values.theta_CaO_in_1);

calc_values.T_m_1=calc_T(...
	calc_values.T_ms_in_1,... 
	calc_values.T_CaO_in_1...
);

% cp values for T

calc_values.cp_air_1=calc_cp_air(calc_values.T_m_1);
calc_values.cp_CaO_1=calc_cp_CaO(calc_values.T_m_1);
calc_values.cp_ms_1=calc_cp_ms();

% lambda values for T

calc_values.lambda_air_1=lookup_lambda_air(calc_values.T_m_1, table_lambda_air);
calc_values.lambda_CaO_1=lookup_lambda_CaCO3(calc_values.T_m_1, table_lambda_CaCO3); % keine Werte für CaO, Annahme: lambda_CaO = lambda_CaCO3
calc_values.lambda_ms_1=calc_lambda_ms(calc_values.T_m_1);

 fprintf('keine Werte für CaO, Annahme: lambda_CaO = lambda_CaCO3 \n')

% lambda_bed, only particles in bed, here CaCO3

calc_values.lambda_bed_1=calc_heat_conductivity_bed(...
	calc_values.T_m_1, ...
	input_values.rho_p_CaO, ...
	input_values.rho_p_bed_CaO, ...
	input_values.C, ...
	constants.R, ...
	input_values.M, ...
    calc_values.lambda_CaO_1, ...
    calc_values.lambda_air_1, ...
	input_values.p, ...
    calc_values.cp_air_1, ...
	input_values.Cf,...
	input_values.f_zeta,...
	input_values.d_p, ...
	constants.sigma,...
	input_values.epsilon_bed,...
	input_values.phi_p...
);


[calc_values.alpha_1, calc_values.alpha_WS_1, calc_values.alpha_beddry_1, calc_values.alpha_WP_1] =calc_heat_transfer_coefficient(...
	calc_values.T_m_1,              ...
	input_values.C,             ...
	constants.R,                ...
	input_values.M,             ...
	calc_values.lambda_air_1,      ...
	input_values.p,             ...
	calc_values.cp_air_1,          ...
	input_values.rho_p_CaO,     ...
	calc_values.lambda_CaO_1,    ...
	calc_values.cp_CaO_1,      ...
	constants.sigma,            ...
	input_values.epsilon_w,     ...
	input_values.epsilon_bed,   ...
    input_values.d_p,           ...
    input_values.delta_p,       ...
    input_values.phi,            ...
	parameters.t_res_1              ...
);


% convective heat transport molten salt within plates

% material values for T_m_1
calc_values.eta_ms_1=calc_eta_ms(...
    constants.R,...
    calc_values.T_m_1...
);

calc_values.rho_ms_1=calc_rho_ms(calc_values.T_m_1);

calc_values.ny_ms_1=calc_ny_ms(...
    calc_values.eta_ms_1,...
    calc_values.rho_ms_1...
);

% Reynolds-Number and Prandtl-Number

calc_values.d_h=calc_d_h(input_values.s_plate_ms);

calc_values.Re_d_1=calc_Re_d(...
    parameters.w_ms_1,... 
    calc_values.d_h, ...
    calc_values.ny_ms_1...
);

calc_values.Pr_1=calc_Pr(...
    calc_values.ny_ms_1,...
    calc_values.rho_ms_1,...
    calc_values.lambda_ms_1,...
    calc_values.cp_ms_1...
);

calc_values.Nu_m_1=calc_Nu_m(...
    calc_values.Re_d_1,...
    calc_values.Pr_1,...
    calc_values.d_h,...
    input_values.width_plate...
);

calc_values.alpha_conv_1=calc_alpha_conv(...
    calc_values.Nu_m_1,...
    calc_values.lambda_ms_1,...
    calc_values.d_h...
);


% k_tot Phase 1

calc_values.k_tot_1=calc_k_tot(...
    calc_values.alpha_conv_1,...
    calc_values.alpha_1,...
    input_values.delta_mat,...
    input_values.lambda_mat...
);



% pressure loss for one HX-row

calc_values.lambda_fric_1=calc_lambda_fric(calc_values.Re_d_1);

calc_values.delta_p_ms_1=calc_delta_p_ms(...
    calc_values.lambda_fric_1,...
    input_values.width_plate,...
    parameters.w_ms_1,...
    calc_values.rho_ms_1,...
    calc_values.d_h...
);


% Heat Exchanger Parameter (here plates with molten salt) same geometry for CaCO3 and CaO HX

calc_values.height_hx_1=calc_height_hx(...
    parameters.t_res_1,...
    input_values.w_bed_CaO...
);

calc_values.height_plate=calc_height_plate(calc_values.height_hx_1, parameters.hx_type);

% mass flow through cross section area
 fprintf('mass flow through cross section phase 1 not implemented \n')
 
calc_values.A_cs_ms_1ch_1=calc_A_cs_ms_1ch(...
    input_values.s_plate_ms,...
    calc_values.height_plate...
);

calc_values.A_cs_bed_1ch_1=calc_A_cs_bed_1ch(...
    input_values.s_plate_bed,...
    input_values.width_plate...
);

calc_values.m_cs_ms_1ch_1= calc_m_cs_ms(...
    calc_values.rho_ms_1,...
    parameters.w_ms_1,...
    calc_values.A_cs_ms_1ch_1...
);

calc_values.m_cs_CaO_1ch_1= calc_m_cs_bed(...
    input_values.rho_p_bed_CaO,...
    input_values.w_bed_CaO,...
    calc_values.A_cs_bed_1ch_1...
);

calc_values.A_plate=calc_A_plate(calc_values.height_plate, input_values.width_plate);
% calc_values.A_plates_row=calc_A_plates_row(calc_values.A_plate, input_values.n_plates_row);
% calc_values.A_plates_tot=calc_A_plates_tot(calc_values.A_plates_row, input_values.n_rows);

fprintf('Gesamtmassenstrom Geometrie! Wie viele Reihen gibt es? \n')

% cross flow heat exchanger

 fprintf('m_cs_CaO_1 Massenstrom durch einen Wärmeübertrager ungleich m_CaO_1 Gesamtmassenstrom \n')
 
% heat capacity flow
calc_values.C_p_CaO_1=calc_C_p(calc_values.m_cs_CaO_1ch_1, calc_values.cp_CaO_1);% m_cs_CaO_1 Massenstrom durch einen Wärmeübertrager ungleich m_CaO_1 Gesamtmassenstrom
calc_values.C_p_ms_1=calc_C_p(calc_values.m_cs_ms_1ch_1, calc_values.cp_ms_1);

[calc_values.NTU_1_1, calc_values.NTU_2_1]=calc_NTU(...   % NTU_1 refers to MS flow, NTU_2 to particle bed flow (VDI C1. Abb. 40/41)
    calc_values.k_tot_1,...
    calc_values.height_hx_1,...
    input_values.width_plate,...
    calc_values.C_p_ms_1,...
    calc_values.C_p_CaO_1...
);


[calc_values.R_1_1, calc_values.R_2_1]=calc_R_12(calc_values.C_p_ms_1, calc_values.C_p_CaO_1); 

[calc_values.P_1_1, calc_values.P_2_1, calc_values.F_1]=calc_P_12_F(...
    calc_values.R_1_1,...
    calc_values.R_2_1,...
    calc_values.NTU_1_1,...
    calc_values.NTU_2_1,...
    parameters.hx_type...
);

calc_values.T_CaO_out_1=calc_T_CaO_out_plates(calc_values.P_2_1, calc_values.T_CaO_in_1, calc_values.T_ms_in_1);
calc_values.T_ms_out_1=calc_T_ms_out_1_plates(calc_values.P_1_1, calc_values.T_CaO_in_1, calc_values.T_ms_in_1);

calc_values.theta_CaO_out_1=convert_T2theta(calc_values.T_CaO_out_1);
calc_values.theta_ms_out_1=convert_T2theta(calc_values.T_ms_out_1);


fprintf('NUR FÜR EINEN CHANNEL BERECHNET, mit gesamtmassenstrom gleiche T_out! Kürzt sich raus \n')

% Theta_m_hx=(T_CaO_out_1-T_ms_in_1)/(T_CaO_in_1-T_ms_in);


% heat flux

% calc_values.q_p_1=calc_q_p_hx_CaO_plates(   ...
%     calc_values.alpha_1,      ...
% 	calc_values.T_ms_in_1,   ...
% 	calc_values.T_CaO_in_1 ...
% );


% outlet temperature
% 
% calc_values.T_CaO_out=calc_T_CaO_out_plates(...
%     calc_values.T_CaO_in_1, 	...
%     calc_values.T_ms_in_1, 	...
% 	calc_values.alpha_1, 		...
%     calc_values.A_plates_tot, 	...
%     input_values.m_CaO_1, 	...
%     calc_values.cp_CaO_1 		...
% );

% critical residence time

% calc_values.t_c_1=calc_t_c(   ...
%     input_values.rho_p_CaO, ...
%     calc_values.lambda_bed_1, ...
%     calc_values.cp_CaO_1,   ...
%     calc_values.alpha_WS_1    ...
% );


%% Phase 3: Heat Transfer Plates to CaCO3

% CONVERSION OF VARIABLES
% temperatures

calc_values.T_ms_in_3=calc_values.T_ms_out_1;
calc_values.theta_ms_in_3=calc_values.T_ms_in_3-273.15;

% calc_values.T_ms_in_3=convert_theta2T(input_values.theta_ms_in_3);
calc_values.T_CaCO3_in_3=convert_theta2T(input_values.theta_CaCO3_in_3);

calc_values.T_m_3=calc_T(...
	input_values.theta_CaCO3_in_3,... 
	calc_values.theta_ms_in_3...
);



% cp values for T

calc_values.cp_air_3=calc_cp_air(calc_values.T_m_3);
calc_values.cp_CaCO3_3=calc_cp_CaCO3(calc_values.T_m_3);
calc_values.cp_CaO_3=calc_cp_CaO(calc_values.T_m_3);
calc_values.cp_CaCO3_mf_3=calc_cp_CaCO3_mf(input_values.m_frac_CaO_3, input_values.m_frac_CaCO3_3, calc_values.cp_CaO_3, calc_values.cp_CaCO3_3);
calc_values.cp_ms_3=calc_cp_ms();


% lambda values for T
% load('table_lambda_air.mat');
% load('table_lambda_CaCO3.mat');

calc_values.lambda_air_3=lookup_lambda_air(calc_values.T_m_3, table_lambda_air);
calc_values.lambda_CaCO3_3=lookup_lambda_CaCO3(calc_values.T_m_3, table_lambda_CaCO3);
calc_values.lambda_ms_3=calc_lambda_ms(calc_values.T_m_3);

% lambda_bed, only particles in bed, here CaCO3

calc_values.lambda_bed_3=calc_heat_conductivity_bed(...
	calc_values.T_m_3, ...
	input_values.rho_p_CaCO3, ...
	input_values.rho_p_bed_CaCO3, ...
	input_values.C, ...
	constants.R, ...
	input_values.M, ...
    calc_values.lambda_CaCO3_3, ...
    calc_values.lambda_air_3, ...
	input_values.p, ...
    calc_values.cp_air_3, ...
	input_values.Cf,...
	input_values.f_zeta,...
	input_values.d_p, ...
	constants.sigma,...
	input_values.epsilon_bed,...
	input_values.phi_p...
);


[calc_values.alpha_3, calc_values.alpha_WS_3, calc_values.alpha_beddry_3, calc_values.alpha_WP_3] =calc_heat_transfer_coefficient(...
	calc_values.T_m_3,              ...
	input_values.C,             ...
	constants.R,                ...
	input_values.M,             ...
	calc_values.lambda_air_3,      ...
	input_values.p,             ...
	calc_values.cp_air_3,          ...
	input_values.rho_p_CaCO3,     ...
	calc_values.lambda_CaCO3_3,    ...
	calc_values.cp_CaCO3_mf_3,      ...
	constants.sigma,            ...
	input_values.epsilon_w,     ...
	input_values.epsilon_bed,   ...
    input_values.d_p,           ...
    input_values.delta_p,       ...
    input_values.phi,            ...
	parameters.t_res_3              ...
);

% convective heat transport molten salt within plates

% material values for T_m_3
calc_values.eta_ms_3=calc_eta_ms(...
    constants.R,...
    calc_values.T_m_3...
);

calc_values.rho_ms_3=calc_rho_ms(calc_values.T_m_3);

calc_values.ny_ms_3=calc_ny_ms(...
    calc_values.eta_ms_3,...
    calc_values.rho_ms_3...
);

% Reynolds-Number and Prandtl-Number

calc_values.d_h=calc_d_h(input_values.s_plate_ms);

calc_values.Re_d_3=calc_Re_d(...
    parameters.w_ms_3,... 
    calc_values.d_h, ...
    calc_values.ny_ms_3...
);

calc_values.Pr_3=calc_Pr(...
    calc_values.ny_ms_3,...
    calc_values.rho_ms_3,...
    calc_values.lambda_ms_3,...
    calc_values.cp_ms_3...
);

calc_values.Nu_m_3=calc_Nu_m(...
    calc_values.Re_d_3,...
    calc_values.Pr_3,...
    calc_values.d_h,...
    input_values.width_plate...
);

calc_values.alpha_conv_3=calc_alpha_conv(...
    calc_values.Nu_m_3,...
    calc_values.lambda_ms_3,...
    calc_values.d_h...
);

% k_tot Phase 3

calc_values.k_tot_3=calc_k_tot(...
    calc_values.alpha_conv_3,...
    calc_values.alpha_3,...
    input_values.delta_mat,...
    input_values.lambda_mat...
);



% pressure loss for one HX-row

calc_values.lambda_fric_3=calc_lambda_fric(calc_values.Re_d_3);

calc_values.delta_p_ms_3=calc_delta_p_ms(...
    calc_values.lambda_fric_3,...
    input_values.width_plate,...
    parameters.w_ms_3,...
    calc_values.rho_ms_3,...
    calc_values.d_h...
);


% Heat Exchanger Parameter (here plates with molten salt) same geometry for CaCO3 and CaO HX

  fprintf('height_hx_1 and height_hx_3 for calc_values.height_hx_tot -> t_res is parameter \n')

calc_values.height_hx_3=calc_height_hx(...
    parameters.t_res_3,...
    input_values.w_bed_CaO...
);

calc_values.height_plate=calc_height_plate(calc_values.height_hx_3, parameters.hx_type);

% mass flow through cross section area
 fprintf('mass flow through cross section CaCO3 is too high, vergleich mit massenfluss verhaeltnis cao caco3!!! \n')
 
calc_values.A_cs_ms_1ch_3=calc_A_cs_ms_1ch(...
    input_values.s_plate_ms,...
    calc_values.height_plate...
);

calc_values.A_cs_bed_1ch_3=calc_A_cs_bed_1ch(...
    input_values.s_plate_bed,...
    input_values.width_plate...
);

calc_values.m_cs_ms_1ch_3= calc_m_cs_ms(...
    calc_values.rho_ms_3,...
    parameters.w_ms_3,...
    calc_values.A_cs_ms_1ch_3...
);

calc_values.m_cs_CaCO3_1ch_3= calc_m_cs_bed(...
    input_values.rho_p_bed_CaCO3,...
    input_values.w_bed_CaCO3,...
    calc_values.A_cs_bed_1ch_3...
);
 

% calc_values.A_plate=calc_A_plate(calc_values.height_plate, input_values.width_plate);
% calc_values.A_plates_row=calc_A_plates_row(calc_values.A_plate, input_values.n_plates_row);
% calc_values.A_plates_tot=calc_A_plates_tot(calc_values.A_plates_row, input_values.n_rows);



% cross flow heat exchanger

 fprintf('m_cs_CaO_1 Massenstrom durch einen Wärmeübertrager ungleich m_CaO_1 Gesamtmassenstrom, Phase 3 !! \n')
 
% heat capacity flow
calc_values.C_p_CaCO3_3=calc_C_p(calc_values.m_cs_CaCO3_1ch_3, calc_values.cp_CaCO3_mf_3);% m_cs_CaO_1 Massenstrom durch einen Wärmeübertrager ungleich m_CaO_1 Gesamtmassenstrom
calc_values.C_p_ms_3=calc_C_p(calc_values.m_cs_ms_1ch_3, calc_values.cp_ms_3);

[calc_values.NTU_1_3, calc_values.NTU_2_3]=calc_NTU(...   % NTU_1 refers to MS flow, NTU_2 to particle bed flow (VDI C1. Abb. 40/41)
    calc_values.k_tot_3,...
    calc_values.height_hx_3,...
    input_values.width_plate,...
    calc_values.C_p_ms_3,...
    calc_values.C_p_CaCO3_3...
);


[calc_values.R_1_3, calc_values.R_2_3]=calc_R_12(calc_values.C_p_ms_3, calc_values.C_p_CaCO3_3); 

[calc_values.P_1_3, calc_values.P_2_3, calc_values.F_3]=calc_P_12_F(...
    calc_values.R_1_3,...
    calc_values.R_2_3,...
    calc_values.NTU_1_3,...
    calc_values.NTU_2_3,...
    parameters.hx_type...
);

calc_values.T_CaCO3_out_3=calc_T_CaCO3_out_plates(calc_values.P_2_3, calc_values.T_CaCO3_in_3, calc_values.T_ms_in_3);
calc_values.T_ms_out_3=calc_T_ms_out_3_plates(calc_values.P_1_3, calc_values.T_CaCO3_in_3, calc_values.T_ms_in_3);

calc_values.theta_CaCO3_out_3=convert_T2theta(calc_values.T_CaCO3_out_3);
calc_values.theta_ms_out_3=convert_T2theta(calc_values.T_ms_out_3);

result=calc_values.theta_CaCO3_out_3;

% heat flow
% 
% calc_values.q_p_3=calc_q_p_hx_CaCO3_plates(   ...
%     calc_values.alpha_3,     ...
% 	calc_values.T_ms_in_3,   ...
% 	calc_values.T_CaCO3_in_3 ...
% );
% 
% 
% % outlet temperature
% 
% calc_values.T_CaCO3_out=calc_T_CaCO3_out_plates(...
%     calc_values.T_CaCO3_in_3, 	...
%     calc_values.T_ms_in_3,      ...
% 	calc_values.alpha_3, 		...
%     calc_values.A_plates_tot, 	...
%     input_values.m_CaCO3_3, 	...
%     calc_values.cp_CaCO3_mf_3 	...
% );
% 
% % critical residence time
% 
% calc_values.t_c_3=calc_t_c(   ...
%     input_values.rho_p_CaCO3, ...
%     calc_values.lambda_bed_3, ...
%     calc_values.cp_CaCO3_mf_3,...
%     calc_values.alpha_WS_3    ...
% );

end
